I"5<h1 id="java-garbage-collection">Java Garbage Collection</h1>

<p><br /></p>
<h2 id="가비지-컬렉션-과정">가비지 컬렉션 과정</h2>
<h3 id="gc를-알아보기전-stop-the-world라는-용어를-알아야한다">GC를 알아보기전 ‘stop the world’라는 용어를 알아야한다</h3>
<blockquote>
  <p>‘stop the world’란 GC를 실행하기 위해 JVM이 애플리케이션 실행을 멈추는 것이다</p>
  <h3 id="stop-the-world가-발생하면-gc를-실행하는-쓰레드를-제외한-나머지-쓰레드는-모두-작업을-멈춘다">‘stop the world’가 발생하면 GC를 실행하는 쓰레드를 제외한 나머지 쓰레드는 모두 작업을 멈춘다</h3>
  <h3 id="gc작업을-완료한-이후-중단했던-작업을-다시-시작한다-어떤-gc알고리즘을-사용하더라도">GC작업을 완료한 이후 중단했던 작업을 다시 시작한다. 어떤 GC알고리즘을 사용하더라도</h3>
  <h3 id="stop-the-world는-발생한다-대개의-경우-gc튜닝이란-이-stop-the-world-시간을-줄이는-것이다">‘stop the world’는 발생한다. 대개의 경우 GC튜닝이란 이 ‘stop the world’ 시간을 줄이는 것이다.</h3>
</blockquote>

<p><br /></p>

<h3 id="java에서는-개발자가-메모리를-명시적으로-해제하지-않기-때문에-gc가-필요없는-객체를-찾아">Java에서는 개발자가 메모리를 명시적으로 해제하지 않기 때문에 GC가 필요없는 객체를 찾아</h3>
<h3 id="지우는-작업을-한다-gc는-다음의-두가지-전제하에-만들어졌다">지우는 작업을 한다. GC는 다음의 두가지 전제하에 만들어졌다.</h3>

<p><br /></p>

<ul>
  <li>
    <h3 id="대부분의-객체는-금방-접근-불가능이-된다">대부분의 객체는 금방 접근 불가능이 된다.</h3>
  </li>
  <li>
    <h3 id="오래된-객체에서-젊은-객체로의-참조는-아주-적게-존재한다">오래된 객체에서 젊은 객체로의 참조는 아주 적게 존재한다.</h3>
  </li>
</ul>

<p><br /></p>

<h3 id="이러한-전제-조건에-따라-크게-2개의-물리적-공간을-나누었는데-young-영역과-old영역">이러한 전제 조건에 따라 크게 2개의 물리적 공간을 나누었는데 ‘young’ 영역과 ‘old’영역</h3>
<h3 id="이다">이다.</h3>

<p><br /></p>

<ul>
  <li>
    <h3 id="young영역--새롭게-생성한-객체의-대부분이-여기에-위치한다-대부분의-객체가-금방-접근--불가능-상태가-되기-때문에-많은-객체가-young영역에-생성되었다가-사라진다-이-영역에서--객체가-사라질때-minor-gc가-발생한다고-말한다">Young영역 : 새롭게 생성한 객체의 대부분이 여기에 위치한다. 대부분의 객체가 금방 접근 ### 불가능 상태가 되기 때문에 많은 객체가 Young영역에 생성되었다가 사라진다. 이 영역에서 ### 객체가 사라질때 Minor GC가 발생한다고 말한다.</h3>
  </li>
  <li>
    <h3 id="old영역--접근-불가능-상태로-되지-않아-young영역에서-살아남은-객체가-여기로-복사된다">Old영역 : 접근 불가능 상태로 되지 않아 Young영역에서 살아남은 객체가 여기로 복사된다.</h3>
    <h3 id="대부분-young영역보다-크게-할당하며-크기가-큰-만큼-young영역보다-gc는-적게-발생한다">대부분 Young영역보다 크게 할당하며, 크기가 큰 만큼 Young영역보다 GC는 적게 발생한다.</h3>
    <h3 id="이-영역-에서-객체가-사라질때-full-gc가-발생한다고-말한다">이 영역 에서 객체가 사라질때 Full GC가 발생한다고 말한다.</h3>
  </li>
</ul>

<p><br /></p>

<p><img src="https://user-images.githubusercontent.com/37110261/86885427-3fba8200-c130-11ea-8d0f-54befeb4b7e2.png" alt="gc그림" /></p>

<p><br /></p>

<h3 id="위-그림의-permanent-genernation-영역-은-method-area라고도-한다-객체나-문자열정보를">위 그림의 Permanent Genernation 영역 은 Method area라고도 한다. 객체나 문자열정보를</h3>
<h3 id="저장하는-곳이며-old영역에서-살아남은-객체가-영원히-남아-있는-곳은-아니다-이-영역에서">저장하는 곳이며 Old영역에서 살아남은 객체가 영원히 남아 있는 곳은 아니다. 이 영역에서</h3>
<h3 id="gc가-발생할-수도-있는데-여기서-발생해도-full-gc의-횟수에-포함된다">GC가 발생할 수도 있는데 여기서 발생해도 Full GC의 횟수에 포함된다.</h3>

<p><br /></p>

<h2 id="young-영역의-구성">Young 영역의 구성</h2>
<h3 id="young-영역은-3개의-영역으로-나뉜다">Young 영역은 3개의 영역으로 나뉜다.</h3>
<ul>
  <li>
    <h3 id="eden-영역">Eden 영역</h3>
  </li>
  <li>
    <h3 id="survivor-영역-2개">Survivor 영역 (2개)</h3>
  </li>
</ul>

<h3 id="각-영역의-처리-절차-순서">각 영역의 처리 절차 순서</h3>
<ul>
  <li>
    <h3 id="새로-생성한-대부분의-객체는-eden영역에-위치한다">새로 생성한 대부분의 객체는 Eden영역에 위치한다.</h3>
  </li>
  <li>
    <h3 id="eden-영역에서-gc가-한-번-발생한-후-살아남은-객체는-survivor-영역-중-하나로-이동된다">Eden 영역에서 GC가 한 번 발생한 후 살아남은 객체는 Survivor 영역 중 하나로 이동된다.</h3>
  </li>
  <li>
    <h3 id="eden-영역에서-gc가-발생하면-이미-살아남은-객체가-존재하는-survivor-영역으로-객체가-계속-쌓인다">Eden 영역에서 GC가 발생하면 이미 살아남은 객체가 존재하는 Survivor 영역으로 객체가 계속 쌓인다.</h3>
  </li>
  <li>###</li>
</ul>
:ET