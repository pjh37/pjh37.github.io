I"Q*<h1 id="inversion-of-control">Inversion of control</h1>

<h3 id="의존성에-대한-컨트롤이-뒤바꼈다">의존성에 대한 컨트롤이 뒤바꼈다.</h3>
<h3 id="원래는-아래와-같은-코드-처럼-자신이-만들었다">원래는 아래와 같은 코드 처럼 자신이 만들었다</h3>
<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">OwnerController</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">OwnerRespository</span> <span class="n">repository</span><span class="o">=</span><span class="k">new</span> <span class="nc">OwnerRespository</span><span class="o">();</span>
<span class="o">}</span>

</code></pre></div></div>
<p><br /></p>
<h3 id="하지만-여기서-ioc가-될-경우-아래와-같이-쓸-수-있다">하지만 여기서 IOC가 될 경우 아래와 같이 쓸 수 있다.</h3>
<p><br /></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">OwnerController</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">OwnerRespository</span> <span class="n">repository</span><span class="o">;</span>

    <span class="c1">// 의존성을 주입해준다.</span>
    <span class="kd">public</span> <span class="nf">OwnerController</span><span class="o">(</span><span class="nc">OwnerRespository</span> <span class="n">repository</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">repository</span><span class="o">=</span><span class="n">repository</span><span class="o">;</span>
    <span class="o">}</span>
    
<span class="o">}</span>

</code></pre></div></div>
<p><br /></p>

<h3 id="예전에는-자바의-객체를-생성하고-객체간의-의존관계를-연결하는-등의-제어권을-개발자가-가지고-있었지만">예전에는 자바의 객체를 생성하고 객체간의 의존관계를 연결하는 등의 제어권을 개발자가 가지고 있었지만</h3>
<h3 id="스프링에서는-제어권을-생명주기를-관리하는-컨테이너가-가져가는데-이것을-제어권-역전-ioc라고-한다">스프링에서는 제어권을 생명주기를 관리하는 컨테이너가 가져가는데 이것을 제어권 역전 IOC라고 한다.</h3>

<p><br /></p>

<h1 id="ioc-container">IOC Container</h1>
<p><br /></p>

<h3 id="--빈bean을-만들고-엮어주며-제공해준다-즉-컨테이너-안에-있는-빈들의-의존성을-관리한다">- 빈(bean)을 만들고 엮어주며 제공해준다. 즉, 컨테이너 안에 있는 빈들의 의존성을 관리한다.</h3>
<h3 id="--기본적으로-컨테이너는-객체를-생성하고-객체간의-의존성을-이어주는-역할을-한다">- 기본적으로 컨테이너는 객체를 생성하고 객체간의 의존성을 이어주는 역할을 한다.</h3>
<h3 id="--객체지향적으로-srp을-지킬-수-있게-된다">- 객체지향적으로 SRP을 지킬 수 있게 된다.</h3>
<p><br /></p>

<h2 id="1-beanfactory">1. BeanFactory</h2>
<h3 id="beanfactory인터페이스는-ioc-컨테이너의-기능을-정의하고-있는-인터페이스-이며-bean의-생성-및-의존성-주입-생명주기관리등의-기능을-제공한다">BeanFactory인터페이스는 IoC 컨테이너의 기능을 정의하고 있는 인터페이스 이며, Bean의 생성 및 의존성 주입, 생명주기관리등의 기능을 제공한다</h3>
<blockquote>
  <p>여기서 bean이란 IoC 컨테이너에 의해 생성되고 관리되는 객체를 의미한다.</p>
</blockquote>

<p><br /></p>
<h2 id="2-applicationcontext">2. ApplicationContext</h2>
<h3 id="beanfactory-인터페이스를-상속받는-applicationcontext는-beanfactory가-제공하는-기능-외에-aop-메세지처리-이벤트-처리-등의-기능을-제공한다">BeanFactory 인터페이스를 상속받는 ApplicationContext는 BeanFactory가 제공하는 기능 외에 AOP, 메세지처리, 이벤트 처리 등의 기능을 제공한다.</h3>

<p><br /></p>

<h1 id="빈bean">빈(Bean)</h1>

<blockquote>
  <p>스프링 IoC 컨테이너가 관리하는 객체</p>
</blockquote>

<p><br /></p>

<h2 id="빈-등록-방법">빈 등록 방법</h2>
<ul>
  <li>
    <h3 id="component-scanning">Component Scanning</h3>
    <ul>
      <li>
        <h3 id="component">@Component</h3>
        <ul>
          <li>
            <h3 id="repository">@Repository</h3>
          </li>
          <li>
            <h3 id="service">@Service</h3>
          </li>
          <li>
            <h3 id="controller">@Controller</h3>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<blockquote>
  <p>Component Scanning 할때 SpringBootApplication이라는 어노테이션이 붙은 하위의 패키지, 클래스들을 scan하여
@Component라는 어노테이션이 붙은 클래스들을 빈으로 등록해준다.
@Repository,@Service,@Controller 는 왜 빈으로 등록되지? -&gt; 어노테이션 내부 코드를 보면 @Component가 붙어있다.</p>
</blockquote>

<ul>
  <li>
    <h3 id="직접-xml이나-자바-설정-파일에-등록">직접 xml이나 자바 설정 파일에 등록</h3>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">nameById</span><span class="o">(){</span>
  <span class="k">return</span> <span class="s">"name"</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div>    </div>
    <blockquote>
      <p>주의점: @Bean 어노테이션으로 빈을 등록할때는 @Configuration 어노테이션이 붙은 클래스 안에서 작성해야한다.</p>
    </blockquote>
  </li>
</ul>

<p><br /></p>

<h2 id="빈-꺼내-쓰는-방법">빈 꺼내 쓰는 방법</h2>
<h3 id="autowired-또는-inject">@Autowired 또는 @Inject</h3>
<h3 id="applicationcontext에서-getbean으로-직접-꺼내기">ApplicationContext에서 getBean()으로 직접 꺼내기</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Autowired</span>
<span class="nc">String</span> <span class="n">nameById</span><span class="o">;</span>

</code></pre></div></div>

<p><br /></p>

<h1 id="의존성-주입-dependency-injection">의존성 주입 (Dependency Injection)</h1>
<h3 id="구체적인-의존-오브젝트와-그것을-사용할-주체-클라이언트-오브젝트를-런타임-시에-연결해주는-작업을-말한다">구체적인 의존 오브젝트와 그것을 사용할 주체, 클라이언트 오브젝트를 런타임 시에 연결해주는 작업을 말한다.</h3>

<h2 id="조건">조건</h2>
<ul>
  <li>
    <h3 id="클래스-모델이나-코드에는-런타임-시점의-의존관계가-드러나지-않는다-그렇게-하기-위해서는-인터페이스에만-의존하고-있어야한다">클래스 모델이나 코드에는 런타임 시점의 의존관계가 드러나지 않는다. 그렇게 하기 위해서는 인터페이스에만 의존하고 있어야한다.</h3>
  </li>
  <li>
    <h3 id="런타임-시점의-의존관계는-팩토리나-컨테이너-같은-제-3의-존재에-의해-결정되야-한다">런타임 시점의 의존관계는 팩토리나 컨테이너 같은 제 3의 존재에 의해 결정되야 한다.</h3>
  </li>
  <li>
    <h3 id="의존관계는-사용할-오브젝트에-대한-레퍼런스를-외부에서-제공해줌으로서-만들어진다">의존관계는 사용할 오브젝트에 대한 레퍼런스를 외부에서 제공해줌으로서 만들어진다.</h3>
  </li>
</ul>

<p><br /></p>

<h2 id="강한-결합-상태">강한 결합 상태</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">A</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">=</span><span class="k">new</span> <span class="no">B1</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p><br /></p>

<h2 id="약한결합-런타임-의존성이-드러나지-않도록-만든-코드">약한결합, 런타임 의존성이 드러나지 않도록 만든 코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">A</span><span class="o">(</span><span class="no">B</span> <span class="n">b</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">b</span><span class="o">=</span><span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="장점">장점</h2>
<h3 id="코드에는-런타임-클래스에-대한-의존관계가-나타나지-않는다-그리고-인터페이스를-통해-결합도가-낮은-코드를-만들게-된다-다른-책임을-가진-사용-의존관계에-있는-대상이-바뀌거나-변경되더라도-자신은-영향을-받지-않습니다">코드에는 런타임 클래스에 대한 의존관계가 나타나지 않는다. 그리고 인터페이스를 통해 결합도가 낮은 코드를 만들게 된다. 다른 책임을 가진 사용 의존관계에 있는 대상이 바뀌거나 변경되더라도 자신은 영향을 받지 않습니다.</h3>

<p><br /></p>

<h2 id="일반적으로-autowired-inject를-붙힌다-어디에">일반적으로 @Autowired, @Inject를 붙힌다 어디에?</h2>
<ul>
  <li>
    <h3 id="생성자">생성자</h3>
  </li>
  <li>
    <h3 id="필드">필드</h3>
  </li>
  <li>
    <h3 id="setter">Setter</h3>
  </li>
</ul>

<h2 id="어노테이션이-안붙었을-경우에는-어떻게">어노테이션이 안붙었을 경우에는 어떻게??</h2>
<h3 id="bean이-되는-클래스에-생성자가-오직-하나만-있고-그-생성자의-매개변수가-빈으로-등록이-되어-있다면">Bean이 되는 클래스에 생성자가 오직 하나만 있고 그 생성자의 매개변수가 빈으로 등록이 되어 있다면</h3>
<h3 id="그-bean을-주입해준다">그 Bean을 주입해준다.</h3>
:ET