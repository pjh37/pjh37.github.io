I"<h1 id="solid-원칙">SOLID 원칙</h1>

<p><br /></p>
<h2 id="객체지향-설계에서-지켜야할-5가지-원칙">객체지향 설계에서 지켜야할 5가지 원칙</h2>

<p><br /></p>

<h2 id="1-srpsingle-responsilbility-principle-단일-책임-원칙">1. SRP(Single Responsilbility Principle) 단일 책임 원칙</h2>
<blockquote>
  <p>객체는 단 하나의 책임만 가져야 한다.</p>
</blockquote>

<h3 id="--응집도는-높게-결합도는-낮게-설계해야-한다">- 응집도는 높게, 결합도는 낮게 설계해야 한다.</h3>
<h3 id="--응집도">- 응집도</h3>
<h3 id="--한-프로그램의-요소가-얼마나-뭉쳐있는가">- 한 프로그램의 요소가 얼마나 뭉쳐있는가</h3>
<h3 id="--결합도">- 결합도</h3>
<h3 id="--프로그램-구성-요소들-사이가-얼마나-의존적인가">- 프로그램 구성 요소들 사이가 얼마나 의존적인가</h3>

<p><br /></p>
<h2 id="2-ocpopen-closed-principle-개방-폐쇄-원칙">2. OCP(Open-Closed Principle) 개방-폐쇄 원칙</h2>
<h3 id="기존의-코드를-변경하지-않으면서closed-기능을-추가할-수-있도록open-설계가-되어야-한다">기존의 코드를 변경하지 않으면서(closed), 기능을 추가할 수 있도록(open) 설계가 되어야 한다</h3>
<h3 id="확장에-대해서는-개방적이고-수정에-대해서는-폐쇄적이어야-한다">확장에 대해서는 개방적이고, 수정에 대해서는 폐쇄적이어야 한다.</h3>
<blockquote>
  <p>이를 만족하는 설계로는, 캡슐화를 통해 여러 객체에서 사용하는 같은 기능은 인터페이스에 정의한다.</p>
</blockquote>

<p><br /></p>

<h2 id="3-lsp-리스코프-치환-원칙">3. LSP 리스코프 치환 원칙</h2>
<h3 id="자식-클래스는-자신의-부모클래스에서-가능한-행위는-수행할-수-있어야-한다">자식 클래스는 자신의 부모클래스에서 가능한 행위는 수행할 수 있어야 한다</h3>
<h3 id="즉-자식-클래슨는-언제든-부모-클래스의-역할을-대체할-수-있어야-한다">즉, 자식 클래슨는 언제든 부모 클래스의 역할을 대체할 수 있어야 한다.</h3>
<h3 id="부모-클래스와-자식-클래스의-행위가-일관-되야-한다">부모 클래스와 자식 클래스의 행위가 일관 되야 한다.</h3>

<p><br /></p>

<h2 id="4-ispinterface-segregation-principle-인터페이스-분리원칙">4. ISP(Interface Segregation Principle), 인터페이스 분리원칙</h2>
<h3 id="자신이-사용하지-않는-인터페이스는-구현하지-말아야-한다는-설계-원칙">자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다는 설계 원칙</h3>
<h3 id="하나의-거대한-인터페이스-보다는-여러개의-구체적인-인터페이스가-더-좋다-라는-것을-의미한다">하나의 거대한 인터페이스 보다는 여러개의 구체적인 인터페이스가 더 좋다 라는 것을 의미한다.</h3>

<p><br /></p>

<h2 id="5-dipdependency-inversion-principle-의존성-역전-원칙">5. DIP(Dependency Inversion Principle), 의존성 역전 원칙</h2>
<h3 id="객체들이-서로-정보를-주고-받을-때-의존관계가-형성되는데-이때-추상성이-낮은-클래스-보다-추상성이-높은-클래스">객체들이 서로 정보를 주고 받을 때 의존관계가 형성되는데, 이때 추상성이 낮은 클래스 보다 추상성이 높은 클래스</h3>
<h3 id="와-의존-관계를-맺어야-한다는-것을-의미한다">와 의존 관계를 맺어야 한다는 것을 의미한다.</h3>
:ET