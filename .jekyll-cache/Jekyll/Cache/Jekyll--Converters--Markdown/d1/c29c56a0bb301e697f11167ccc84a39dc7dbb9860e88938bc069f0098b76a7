I"Q<h2 id="merge-sort">Merge sort</h2>
<h2 id="개요">개요</h2>
<ul>
  <li>
    <h3 id="시간복잡도--onlogn">시간복잡도 : O(N*logN);</h3>
  </li>
  <li>
    <h3 id="병합정렬은-분할정복을-이용하며-계속-반으로-쪼개다가-1개만-남았을때-다시-합치는데-이때-오름차순이라면-작은게-먼저-버퍼에-들어가게-되며-구간의-병합이-끝났을때-버퍼에-있던-데이터를-원래의-데이터로-옮긴다">병합정렬은 분할정복을 이용하며 계속 반으로 쪼개다가 1개만 남았을때 다시 합치는데 이때 오름차순이라면 작은게 먼저 버퍼에 들어가게 되며 구간의 병합이 끝났을때 버퍼에 있던 데이터를 원래의 데이터로 옮긴다.</h3>
  </li>
</ul>

<p><br /></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">bufSize</span><span class="o">=</span><span class="mi">10000</span><span class="c1">// 정렬하고자하는 데이터의 크기에 맞춰 설정</span>
<span class="kt">int</span> <span class="n">buf</span><span class="p">[</span><span class="n">bufSize</span><span class="p">];</span>
<span class="kt">void</span> <span class="nf">merge</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">len</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">len</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">)</span><span class="k">return</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">mid</span><span class="p">;</span>
    <span class="n">mid</span><span class="o">=</span><span class="n">len</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
    <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">j</span><span class="o">=</span><span class="n">mid</span><span class="p">,</span><span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    
    <span class="c1">//분할</span>
    <span class="n">merge</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">mid</span><span class="p">);</span>
    <span class="n">merge</span><span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="n">mid</span><span class="p">,</span><span class="n">len</span><span class="o">-</span><span class="n">mid</span><span class="p">);</span>

    <span class="c1">//병합</span>
    <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">mid</span><span class="o">&amp;&amp;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">len</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;</span><span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]){</span>
            <span class="n">buf</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">];</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="n">buf</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">mid</span><span class="p">){</span>
        <span class="n">buf</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">while</span><span class="p">(</span><span class="n">j</span><span class="o">&lt;</span><span class="n">len</span><span class="p">){</span>
        <span class="n">buf</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">];</span>
    <span class="p">}</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
:ET