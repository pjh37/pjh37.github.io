I"5<h1 id="inversion-of-control">Inversion of control</h1>

<h3 id="의존성에-대한-컨트롤이-뒤바꼈다">의존성에 대한 컨트롤이 뒤바꼈다.</h3>
<h3 id="원래는-아래와-같은-코드-처럼-자신이-만들었다">원래는 아래와 같은 코드 처럼 자신이 만들었다</h3>
<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">OwnerController</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">OwnerRespository</span> <span class="n">repository</span><span class="o">=</span><span class="k">new</span> <span class="nc">OwnerRespository</span><span class="o">();</span>
<span class="o">}</span>

</code></pre></div></div>
<p><br /></p>
<h3 id="하지만-여기서-ioc가-될-경우-아래와-같이-쓸-수-있다">하지만 여기서 IOC가 될 경우 아래와 같이 쓸 수 있다.</h3>
<p><br /></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">OwnerController</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">OwnerRespository</span> <span class="n">repository</span><span class="o">;</span>

    <span class="c1">// 의존성을 주입해준다.</span>
    <span class="kd">public</span> <span class="nf">OwnerController</span><span class="o">(</span><span class="nc">OwnerRespository</span> <span class="n">repository</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">repository</span><span class="o">=</span><span class="n">repository</span><span class="o">;</span>
    <span class="o">}</span>
    
<span class="o">}</span>

</code></pre></div></div>
<p><br /></p>

<h3 id="예전에는-자바의-객체를-생성하고-객체간의-의존관계를-연결하는-등의-제어권을-개발자가-가지고-있었지만">예전에는 자바의 객체를 생성하고 객체간의 의존관계를 연결하는 등의 제어권을 개발자가 가지고 있었지만</h3>
<h3 id="스프링에서는-제어권을-생명주기를-관리하는-컨테이너가-가져가는데-이것을-제어권-역전-ioc라고-한다">스프링에서는 제어권을 생명주기를 관리하는 컨테이너가 가져가는데 이것을 제어권 역전 IOC라고 한다.</h3>

<p><br /></p>

<h1 id="ioc-container">IOC Container</h1>
<p><br /></p>

<h3 id="--빈bean을-만들고-엮어주며-제공해준다-즉-컨테이너-안에-있는-빈들의-의존성을-관리한다">- 빈(bean)을 만들고 엮어주며 제공해준다. 즉, 컨테이너 안에 있는 빈들의 의존성을 관리한다.</h3>
<h3 id="--기본적으로-컨테이너는-객체를-생성하고-객체간의-의존성을-이어주는-역할을-한다">- 기본적으로 컨테이너는 객체를 생성하고 객체간의 의존성을 이어주는 역할을 한다.</h3>
<p><br /></p>

<h2 id="1-beanfactory">1. BeanFactory</h2>
<h3 id="beanfactory인터페이스는-ioc-컨테이너의-기능을-정의하고-있는-인터페이스-이며-bean의-생성-및-의존성-주입-생명주기관리등의-기능을-제공한다">BeanFactory인터페이스는 IoC 컨테이너의 기능을 정의하고 있는 인터페이스 이며, Bean의 생성 및 의존성 주입, 생명주기관리등의 기능을 제공한다</h3>
<blockquote>
  <p>여기서 bean이란 IoC 컨테이너에 의해 생성되고 관리되는 객체를 의미한다.</p>
</blockquote>

<p><br /></p>
<h2 id="2-applicationcontext">2. ApplicationContext</h2>
<h3 id="beanfactory-인터페이스를-상속받는-applicationcontext는-beanfactory가-제공하는-기능-외에-aop-메세지처리-이벤트-처리-등의-기능을-제공한다">BeanFactory 인터페이스를 상속받는 ApplicationContext는 BeanFactory가 제공하는 기능 외에 AOP, 메세지처리, 이벤트 처리 등의 기능을 제공한다.</h3>

<p><br />
빈(Bean)
=====</p>
<blockquote>
  <p>스프링 IoC 컨테이너가 관리하는 객체</p>
</blockquote>

<p><br /></p>

<h2 id="빈-등록-방법">빈 등록 방법</h2>
<ul>
  <li>
    <h3 id="component-scanning">Component Scanning</h3>
    <ul>
      <li>
        <h3 id="component">@Component</h3>
        <ul>
          <li>
            <h3 id="repository">@Repository</h3>
          </li>
          <li>
            <h3 id="service">@Service</h3>
          </li>
          <li>
            <h3 id="controller">@Controller</h3>
            <blockquote>
              <p>Component Scanning 할때 SpringBootApplication이라는 어노테이션이 붙은 하위의 패키지, 클래스들을 scan하여
@Component라는 어노테이션이 붙은 클래스들을 빈으로 등록해준다.
@Repository,@Service,@Controller 는 왜 빈으로 등록되지? -&gt; 어노테이션 안에 코드를 보면 @Component가 붙어있다.</p>
            </blockquote>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="-직접-xml이나-자바-설정-파일에-등록">+ 직접 xml이나 자바 설정 파일에 등록</h3>
:ET