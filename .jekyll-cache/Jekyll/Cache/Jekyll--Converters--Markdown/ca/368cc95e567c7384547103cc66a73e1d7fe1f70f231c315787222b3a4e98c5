I"2<h2 id="프록시와-연관관계-관리">프록시와 연관관계 관리</h2>

<p><br /></p>

<h2 id="프록시-기초">프록시 기초</h2>
<ul>
  <li>
    <h3 id="find--데이터베이스를-통해서-실제-객체-조회">find() : 데이터베이스를 통해서 실제 객체 조회</h3>
  </li>
  <li>
    <h3 id="getreference--데이터베이스-조회를-미루는-가짜프록시">getReference() : 데이터베이스 조회를 미루는 가짜(프록시)</h3>
  </li>
</ul>

<p><br /></p>

<h2 id="프록시의-특징">프록시의 특징</h2>
<p><br />
<img src="https://user-images.githubusercontent.com/37110261/85830121-06e0eb80-b7c7-11ea-91c0-00fc51b5f5c5.PNG" alt="프록시" /></p>
<ul>
  <li>
    <h3 id="프록시-객체는-처음-사용할때-한-번만-초기화">프록시 객체는 처음 사용할때 한 번만 초기화</h3>
  </li>
  <li>
    <h3 id="프록시-객체를-초기화-할-때-프록시-객체가-실제-엔티티로-바뀌는-것은-아니다-초기화-되면-프록시-객체를-통해서-실제-엔티티에-접근가능">프록시 객체를 초기화 할 때, 프록시 객체가 실제 엔티티로 바뀌는 것은 아니다, 초기화 되면 프록시 객체를 통해서 실제 엔티티에 접근가능</h3>
  </li>
  <li>
    <h3 id="프록시-객체는-원본-엔티티를-상속받음-따라서-타입-체크시-주의해야한다비교-실패--대신-instance-of-사용할것">프록시 객체는 원본 엔티티를 상속받음, 따라서 타입 체크시 주의해야한다.(==비교 실패 , 대신 instance of 사용할것)</h3>
  </li>
  <li>
    <h3 id="영속성-컨텍스트에-찾는-엔티티가-이미-있으면-getreference를-호출해도-실제-엔티티-반환">영속성 컨텍스트에 찾는 엔티티가 이미 있으면 getReference()를 호출해도 실제 엔티티 반환</h3>
  </li>
  <li>
    <h3 id="영속성-컨텍스트의-도움을-받을-수-없는-준영속-상태일때-프록시를-초기화하면-문제발생">영속성 컨텍스트의 도움을 받을 수 없는 준영속 상태일때 프록시를 초기화하면 문제발생</h3>
  </li>
</ul>

<p><br /></p>

<h2 id="즉시로딩과-지연로딩중요">즉시로딩과 지연로딩(중요!!)</h2>
<blockquote>
  <p>Member 1 : N Team (1:N)관계일때</p>
  <h3 id="member를-조회할때-team-도-함께-조회해야하는가">Member를 조회할때 team 도 함께 조회해야하는가???</h3>
</blockquote>

<h2 id="지연-로딩lazy을-사용해서-프록시로-조회">지연 로딩(LAZY)을 사용해서 프록시로 조회</h2>
<h3 id="단순히-member-정보만-사용하는-비지니스-로직에서는-지연로딩">단순히 member 정보만 사용하는 비지니스 로직에서는 지연로딩</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"USERNAME"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span> <span class="c1">//**</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"TEAM_ID"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Team</span> <span class="n">team</span><span class="o">;</span>
    <span class="c1">//..</span>
<span class="o">}</span>

</code></pre></div></div>
<p><br />
<img src="https://user-images.githubusercontent.com/37110261/85845214-e15fdc00-b7de-11ea-8086-1e84101a6cb0.PNG" alt="지연로딩" /></p>

<p><br /></p>

<h2 id="member와-team을-자주-함계-사용한다면">Member와 Team을 자주 함계 사용한다면?</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"USERNAME"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">EAGER</span><span class="o">)</span> <span class="c1">//**</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"TEAM_ID"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Team</span> <span class="n">team</span><span class="o">;</span>
    <span class="c1">//..</span>
<span class="o">}</span>

</code></pre></div></div>
<p><br />
<img src="https://user-images.githubusercontent.com/37110261/85845566-6b0fa980-b7df-11ea-8cb0-0f49fa768cf2.PNG" alt="즉시로딩" /></p>

<p><br /></p>

<h2 id="프록시와-즉시로딩-주의">프록시와 즉시로딩 주의!!!!</h2>
<ul>
  <li>
    <h3 id="가급적-지연-로딩만-사용할것실무에서-특히">가급적 지연 로딩만 사용할것!!(실무에서 특히)</h3>
  </li>
  <li>
    <h3 id="즉시-로딩을-적용하면-예상하지-못한-sql발생연결된-수많은-테이블이-조인이-걸려-가져올-수도-있어서-성능-다운">즉시 로딩을 적용하면 예상하지 못한 SQL발생(연결된 수많은 테이블이 조인이 걸려 가져올 수도 있어서 성능 다운)</h3>
  </li>
  <li>
    <h3 id="즉시-로딩은-jpql에서-n1문제를-일으킨다">즉시 로딩은 JPQL에서 N+1문제를 일으킨다.</h3>
  </li>
  <li>
    <h3 id="manytoone-onetoone은-default설정이-즉시-로딩---lazy로-바꾸자">@ManyToOne, @OneToOne은 default설정이 즉시 로딩 -&gt; lazy로 바꾸자!!</h3>
  </li>
  <li>
    <h3 id="onetomany-manytomany는-기본이-지연-로딩">@OneToMany, @ManyToMany는 기본이 지연 로딩</h3>
  </li>
</ul>

:ET